#!/usr/bin/env bash
#
# run gcloud command under config in ${HOME}/.inventcorp.env and/or deployment/scripts/local/.env

#set -o errexit   # exit on error
set -o nounset   # fail if var undefined
set -o noclobber # don't overwrite exists files via >
set -o pipefail  # fails if pipes (|) fails
# set -o xtrace  # debug

# obtain directory with current script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
CURR_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
ROOT_DIR="$(dirname "$CURR_DIR" )"

export CLOUDSDK_CONTAINER_USE_APPLICATION_DEFAULT_CREDENTIALS=false

# import env vars
set -o allexport

# default values
# shellcheck disable=SC2034
GCLOUD_ACCESS_EMAIL="not_set"
# shellcheck disable=SC2034
GCLOUD_USE_SA_FILE=0
# shellcheck disable=SC2034
GCLOUD_ACCESS_SA_FILE="not_set"

# shellcheck source=/dev/null
if [[ -f ${ROOT_DIR}/.env ]]; then
	source "${ROOT_DIR}/.env"
fi
if [[ -f ${HOME}/.inventcorp.env ]]; then
    # use global vars
    # shellcheck source=/dev/null
    source "${HOME}/.inventcorp.env"
fi
set +o allexport

if [ "$GCLOUD_USE_SA_FILE" -eq 0 ]; then
    # access via browser credentials
    if [[ "$GCLOUD_ACCESS_EMAIL" == "not_set" ]]; then
        echo "GCLOUD_ACCESS_EMAIL variable is not set in deployment/scripts/local/.env and/or ~/.inventcorp.env"
        exit 1
    fi

    if [[ $(gcloud auth list --format="value(account)" --filter-account="${GCLOUD_ACCESS_EMAIL}") == "${GCLOUD_ACCESS_EMAIL}" ]]; then
        export CLOUDSDK_CORE_ACCOUNT="${GCLOUD_ACCESS_EMAIL}"
        gcloud config set account "${GCLOUD_ACCESS_EMAIL}" > /dev/null 2>&1
    else
        gcloud auth login --brief "${GCLOUD_ACCESS_EMAIL}"
    fi
else
    # access via sa key file
    if [[ ! ${GCLOUD_ACCESS_SA_FILE:+x} ]]; then
        echo "GCLOUD_ACCESS_SA_FILE is not set or empty"
    fi

    if [[ "$GCLOUD_ACCESS_SA_FILE" == "not_set" ]]; then
      echo "GCLOUD_ACCESS_SA_FILE variable is not set in deployment/scripts/local/.env and/or ~/.inventcorp.env"
      exit 1
    fi
    if [[ ! -f "$GCLOUD_ACCESS_SA_FILE" ]]; then
      echo "GCLOUD_ACCESS_SA_FILE variable is set to ${GCLOUD_ACCESS_SA_FILE} but file not found"
      exit 1
    fi

    GCLOUD_ACCESS_SA_EMAIL=$( grep -o -E '[^"]*@[^"]*\.iam\.gserviceaccount\.com' "${GCLOUD_ACCESS_SA_FILE}" )

    if [[ "${GCLOUD_ACCESS_SA_EMAIL}" == "" ]]; then
      echo "GCLOUD_ACCESS_SA_FILE variable is set to ${GCLOUD_ACCESS_SA_FILE} but file is in incorrect format"
      exit 1
    fi

    if [[ $(gcloud auth list --format="value(account)" --filter-account="${GCLOUD_ACCESS_SA_EMAIL}") == "${GCLOUD_ACCESS_SA_EMAIL}" ]]; then
        export CLOUDSDK_CORE_ACCOUNT="${GCLOUD_ACCESS_SA_EMAIL}"
        gcloud config set account "${GCLOUD_ACCESS_SA_EMAIL}" > /dev/null 2>&1
    else
        if ! gcloud auth activate-service-account --key-file "${GCLOUD_ACCESS_SA_FILE}" > /dev/null 2>&1 ; then
            # repeat to show error
            echo "gcloud auth activate-service-account --key-file ${GCLOUD_ACCESS_SA_FILE}"
            gcloud auth activate-service-account --key-file "${GCLOUD_ACCESS_SA_FILE}"
            exit 1
        fi
    fi
fi

COMMAND="gcloud $*"

# echo $COMMAND

$COMMAND
