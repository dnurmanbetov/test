#!/usr/bin/env bash
#
# wrapper for calling terraform
# transparently run tf from system

set -o errexit   # exit on error
set -o nounset   # fail if var undefined
set -o noclobber # don't overwrite exists files via >
set -o pipefail  # fails if pipes (|) fails
# set -o xtrace  # debug

# obtain directory with current script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
CURR_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
ROOT_DIR="$(dirname "$CURR_DIR" )"

# locate sa
GCLOUD_ACCESS_SA_FILE="not_set"

# import env vars
set -o allexport
# shellcheck source=/dev/null
if [[ -f ${ROOT_DIR}/.env ]]; then
	source "${ROOT_DIR}/.env"
fi
if [[ -f ${HOME}/.inventcorp.env ]]; then
    # use global vars
    # shellcheck source=/dev/null
    source "${HOME}/.inventcorp.env"
fi
set +o allexport

# check sa key file
if [[ "$GCLOUD_ACCESS_SA_FILE" == "not_set" ]]; then
  echo "GCLOUD_ACCESS_SA_FILE variable is not set in deployment/scripts/local/.env and/or ~/.inventcorp.env"
  popd || exit 1
  exit 1
fi

if [[ ! -f "$GCLOUD_ACCESS_SA_FILE" ]]; then
  echo "GCLOUD_ACCESS_SA_FILE variable is set to ${GCLOUD_ACCESS_SA_FILE} but file not found"
  popd || exit 1
  exit 1
fi

# pass sa to tf
export GOOGLE_APPLICATION_CREDENTIALS="${GCLOUD_ACCESS_SA_FILE}"

TERRAFORM_LOCAL_BINARY="$(which terraform)"
COMMAND="${TERRAFORM_LOCAL_BINARY} $*"

export TF_PLUGIN_CACHE_DIR=${HOME}/.terraform.d/plugin-cache

# echo $COMMAND

$COMMAND

